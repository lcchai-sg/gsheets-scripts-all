function onOpen() {
  SpreadsheetApp.getUi().createMenu('Hostname/Root Extractor')
    .addItem('–í–∏—Ç—è–≥–Ω—É—Ç–∏ —Ö–æ—Å—Ç–Ω–µ–π–º', 'extractHostnames')
    .addItem('–í–∏—Ç—è–≥–Ω—É—Ç–∏ —Ä—É—Ç-–¥–æ–º–µ–Ω', 'extractRootDomains')
    .addToUi();
}

function extractHostnames() {
  const { urlCol, resultCol, sheet, ui } = getColumnLetters();
  if (!urlCol) return;

  processURLs({
    sheet,
    urlCol,
    resultCol,
    transformFn: getHostname,
    message: '‚úÖ –ì–æ—Ç–æ–≤–æ! Hostname –≤–∏—Ç—è–≥–Ω–µ–Ω–æ.'
  });
}

function extractRootDomains() {
  const ui = SpreadsheetApp.getUi();

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è PSL
  const lastUpdate = PropertiesService.getScriptProperties().getProperty('PSL_LAST_UPDATE');
  const lastUpdateStr = lastUpdate
    ? Utilities.formatDate(new Date(lastUpdate), Session.getScriptTimeZone(), 'yyyy-MM-dd HH:mm:ss')
    : '–Ω–µ –æ–Ω–æ–≤–ª—é–≤–∞–ª–∞—Å—å';

  const response = ui.alert(
    `üìÖ –î–∞—Ç–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Public Suffix List: ${lastUpdateStr}\n\n` +
    'üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é?\n\n' +
    '----------------------------------------------------------\n' +
    '‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–£–Ñ–ú–û –û–ù–û–í–õ–Æ–í–ê–¢–ò PSL –ö–û–ñ–ù–Ü 3 –ú–Ü–°–Ø–¶–Ü!\n' +
    '----------------------------------------------------------',
    ui.ButtonSet.YES_NO
  );

  if (response === ui.Button.YES) {
    updatePSL();
  }

  let pslRaw = PropertiesService.getScriptProperties().getProperty('PSL');
  if (!pslRaw) {
    ui.alert('Public Suffix List –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞—Ä–∞–∑ –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ.');
    updatePSL();
    pslRaw = PropertiesService.getScriptProperties().getProperty('PSL');
    if (!pslRaw) {
      ui.alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ Public Suffix List. –ü—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó.');
      return;
    }
  }

  const { urlCol, resultCol, sheet } = getColumnLetters();
  if (!urlCol) return;

  const pslList = parsePSL(pslRaw);

  processURLs({
    sheet,
    urlCol,
    resultCol,
    transformFn: (url) => getRootDomainFromURL(url, pslList),
    message: '‚úÖ –ì–æ—Ç–æ–≤–æ! –†—É—Ç-–¥–æ–º–µ–Ω –≤–∏—Ç—è–≥–Ω–µ–Ω–æ.'
  });
}

// ========================
// üîß –£—Ç–∏–ª—ñ—Ç–∏
// ========================

function getColumnLetters() {
  const ui = SpreadsheetApp.getUi();

  const urlColResp = ui.prompt('–í–≤–µ–¥—ñ—Ç—å –õ–Ü–¢–ï–†–£(ENG) –∫–æ–ª–æ–Ω–∫–∏ –∑ URL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ A):');
  const resultColResp = ui.prompt('–í–≤–µ–¥—ñ—Ç—å –õ–Ü–¢–ï–†–£(ENG) –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ B):');

  const urlColLetter = urlColResp.getResponseText().toUpperCase();
  const resultColLetter = resultColResp.getResponseText().toUpperCase();

  if (!urlColLetter.match(/^[A-Z]+$/) || !resultColLetter.match(/^[A-Z]+$/)) {
    ui.alert('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –ª—ñ—Ç–µ—Ä–∞ –∫–æ–ª–æ–Ω–∫–∏.');
    return {};
  }

  if (urlColLetter === resultColLetter) {
    const overwriteResponse = ui.alert(
      `–í–∏ –≤–∫–∞–∑–∞–ª–∏ –æ–¥–Ω—É –π —Ç—É —Å–∞–º—É –ª—ñ—Ç–µ—Ä—É –¥–ª—è –≤—Ö—ñ–¥–Ω–∏—Ö —ñ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: "${urlColLetter}".\n\n` +
      '–¶–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—É –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö URL-–∞–¥—Ä–µ—Å. –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?',
      ui.ButtonSet.YES_NO
    );
    if (overwriteResponse === ui.Button.NO) return {};
  }

  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const urlCol = columnLetterToIndex(urlColLetter);
  const resultCol = columnLetterToIndex(resultColLetter);

  return { urlCol, resultCol, sheet, ui };
}

function processURLs({ sheet, urlCol, resultCol, transformFn, message }) {
  const ui = SpreadsheetApp.getUi();
  const colValues = sheet.getRange(2, urlCol, sheet.getMaxRows() - 1).getValues();
  const nonEmptyValues = colValues.filter(row => row[0] !== '');

  if (nonEmptyValues.length === 0) {
    ui.alert('‚ö†Ô∏èerror‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤ –æ–±—Ä–∞–Ω—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ.');
    return;
  }

  const urlValues = colValues.slice(0, nonEmptyValues.length);

  for (let i = 0; i < urlValues.length; i++) {
    const url = urlValues[i][0];
    const result = url ? transformFn(url.trim()) : '';
    sheet.getRange(i + 2, resultCol).setValue(result);
  }

  ui.alert(message);
}

function updatePSL() {
  const ui = SpreadsheetApp.getUi();
  const url = 'https://publicsuffix.org/list/public_suffix_list.dat';
  try {
    const response = UrlFetchApp.fetch(url);
    const content = response.getContentText();

    PropertiesService.getScriptProperties().setProperty('PSL', content);
    PropertiesService.getScriptProperties().setProperty('PSL_LAST_UPDATE', new Date().toISOString());

    ui.alert('Public Suffix List —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
  } catch (e) {
    ui.alert('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è PSL: ' + e.message);
  }
}

function columnLetterToIndex(letter) {
  let column = 0;
  for (let i = 0; i < letter.length; i++) {
    column *= 26;
    column += letter.charCodeAt(i) - 64;
  }
  return column;
}

function parsePSL(pslRaw) {
  return pslRaw
    .split('\n')
    .map(line => line.trim())
    .filter(line => line && !line.startsWith('//') && !line.startsWith('!'));
}

function getRootDomainFromURL(url, pslList) {
  try {
    if (!/^https?:\/\//i.test(url)) {
      url = 'http://' + url;
    }

    const hostnameMatch = url.match(/^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i);
    if (!hostnameMatch) return 'Invalid URL';

    const hostname = hostnameMatch[1].toLowerCase();
    const parts = hostname.split('.');

    for (let i = 0; i < parts.length; i++) {
      const candidate = parts.slice(i).join('.');
      if (pslList.includes(candidate)) {
        if (i === 0) return hostname;
        return parts.slice(i - 1).join('.');
      }
    }
    if (parts.length >= 2) return parts.slice(-2).join('.');
    return hostname;
  } catch (e) {
    return 'Invalid URL';
  }
}

function getHostname(url) {
  try {
    if (!/^https?:\/\//i.test(url)) {
      url = 'http://' + url;
    }

    const match = url.match(/^https?:\/\/([^\/?#]+)(?:[\/?#]|$)/i);
    if (!match) return 'Invalid URL';

    let hostname = match[1].toLowerCase();
    if (hostname.startsWith('www.')) {
      hostname = hostname.substring(4);
    }
    return hostname;
  } catch {
    return 'Invalid URL';
  }
}
